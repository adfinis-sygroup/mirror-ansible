#!/bin/bash
# usage:    This script is used to mirror a Debian package repository.
#
# last edit: {{ template_run_date }} ansible

# uncomment to enable bash debugging
#set -x

mirrorname="{{ debian_mirror_name }}"
log="{{ debian_mirror_log_path }}/{{ debian_mirror_script_log }}"
timeformat="{{ debian_mirror_script_log_timeformat }}"
source="{{ debian_mirror_script_source }}"
target="{{ debian_mirror_base_path }}"
bwlimit="{{ debian_mirror_script_bwlimit }}"
tmppath="{{ debian_mirror_script_tmppath }}"
statsfile="{{ mirror_base_path }}/debian.json"
archexclude="{{ debian_mirror_script_archexclude }}"
lock="{{ debian_mirror_script_lock_file }}"
rsyncexitcode="-1"
trace="project/trace/${mirrorname}"

# default rsync options
rsync_opts="--bwlimit=${bwlimit} --timeout=600 --verbose --log-file="${log}" --no-motd --human-readable --recursive --hard-links --links --safe-links --times --perms --delay-updates --temp-dir="${tmppath}""
stage1_rsync_opts="--exclude=Packages* --exclude=Sources* --exclude=Release* --exclude=InRelease --exclude=i18n/* --exclude=ls-lR*"
stage2_rsync_opts="--max-delete=40000 --delay-updates --delete --delete-excluded"

function writestatistics() {
    local syncsize="$(du -h "${target}" | tail -1 | cut -f1)"
    local synctime="$(date "${timeformat}")"

    echo "{" > "${statsfile}"
    echo "\"size\": \"${syncsize}\"," >> "${statsfile}"
    echo "\"time\": \"${synctime}\"," >> "${statsfile}"
    echo "\"status\": \"${rsyncexitcode}\""  >> "${statsfile}"
    echo "}" >> "${statsfile}"
}

function writetracefile() {
    globalarchlist="source amd64 arm64 armel armhf hurd-i386 i386 ia64 kfreebsd-amd64 kfreebsd-i386 mips mipsel powerpc ppc64el s390 s390x sparc"
    # set -x
    aexclude="^${archexclude// /\$|^}$"
    archlist=""

    for arch in ${globalarchlist}; do
        if ! [[ ${arch} =~ ${aexclude} ]]; then
            archlist="${archlist} ${arch}"
        fi
    done

    echo "$(date -u)" >> ${target}/${trace}.new
    echo "Used SySync v1" >> ${target}/${trace}.new
    echo "Running on host: ${mirrorname}" >> ${target}/${trace}.new
    echo "Architectures: GUESSED:{${archlist}}" >> ${target}/${trace}.new
    echo "Upstream-mirror: ${source}" >> ${target}/${trace}.new

    mv "${target}/${trace}.new" "${target}/${trace}"

}

function log-message() {
    # usage: log <quit> <"message"> [exitcode]
    # example: log-message 1 "Mirror is already up to date!" 0

    local quit="$1"
    local message="$2"

    echo "[$(date "${timeformat}")] ${message}" >> "${log}"
    echo "---------------------------------------------------------------" >> "${log}"

    if [ "${quit}" = 1 ]; then
        local exitcode="$3"
        writestatistics
        writetracefile
        exit ${exitcode}
    fi
}

# create lock or exit if already locked in order to prevent multiple syncs
exec 9>"${lock}"
flock -n 9 || log-message 1 "Debian mirror rsync job is already running!" 1

# The temp directory used by rsync --delay-updates is not
# world-readable remotely. Always exclude it to avoid errors.
exclude="${exclude} --exclude=.~tmp~/"

sourceexclude=${sourceexclude:-""}
archexclude=${archexclude:-""}

# Generate rsync exlude list defined in $ARCH_EXCLUDE
for ARCH in ${archexclude}; do
    exclude="${exclude} --exclude=binary-${ARCH}/ --exclude=installer-${ARCH}/ --exclude=Contents-${ARCH}.gz --exclude=Contents-udeb-${ARCH}.gz --exclude=Contents-${ARCH}.diff/ --exclude=arch-${ARCH}.files --exclude=arch-${ARCH}.list.gz --exclude=*_${ARCH}.deb --exclude=*_${ARCH}.udeb --exclude=*_${ARCH}.changes"
    if [ "${ARCH}" = "source" ]; then
        if [ -z ${sourceexclude} ]; then
            sourceexclude=" --exclude=source/ --exclude=*.tar.gz --exclude=*.diff.gz --exclude=*.tar.bz2 --exclude=*.tar.xz --exclude=*.diff.bz2 --exclude=*.dsc "
        fi
    fi
done

log-message 0 "Running stage 1 of debian rsync job"
rsync ${rsync_opts} \
    ${stage1_rsync_opts} \
    ${exclude} ${sourceexclude}\
    "${source}::debian" \
    "${target}"
rsyncexitcode="$?"

if [ "${rsyncexitcode}" = "0" ]; then
    log-message 0 "First stage of rsync done successfully."
else
    log-message 1 "rsync had an error while running the first stage." ${rsyncexitcode}
fi

log-message 0 "Running stage 2 of debian rsync job"
rsync ${rsync_opts} \
    ${stage2_rsync_opts} \
    ${exclude} ${sourceexclude}\
    "${source}::debian" \
    "${target}"
rsyncexitcode="$?"

if [ "${rsyncexitcode}" = "0" ]; then
    log-message 0 "Second stage of rsync done successfully."
    log-message 1 "Finished Debian mirror rsync job." ${rsyncexitcode} # -> exit 0
else
    log-message 1 "rsync had an error while running the second stage." ${rsyncexitcode}
fi
